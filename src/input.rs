//! I need to think about what I want the input API to look like. presumably I don't want to require
//! a callback/poll API. I'm thinking there will need to be somekind of sparse structure to lookup
//! keystates

use winit::keyboard::{Key, KeyCode};

// TODO: This should hold a timer since last state change
// now we need to have the user map these to events
#[derive(Default, Copy, Clone, PartialEq, Eq)]
pub enum KeyState {
    Click,
    #[default]
    Released,
    Pressed,
}

impl KeyState {
    pub(crate) fn press(&mut self) {
        match self {
            KeyState::Click => *self = KeyState::Pressed,
            KeyState::Released => *self = KeyState::Click,
            KeyState::Pressed => {}
        }
    }

    pub(crate) fn release(&mut self) {
        *self = KeyState::Released
    }

    pub(crate) fn tick(self) -> Self {
        match self {
            KeyState::Click => KeyState::Pressed,
            KeyState::Released => KeyState::Released,
            KeyState::Pressed => KeyState::Pressed,
        }
    }
}

#[derive(Default)]
pub struct Keys {
    pub escape: KeyState,
    pub f1: KeyState,
    pub f2: KeyState,
    pub f3: KeyState,
    pub f4: KeyState,
    pub f5: KeyState,
    pub f6: KeyState,
    pub f7: KeyState,
    pub f8: KeyState,
    pub f9: KeyState,
    pub f10: KeyState,
    pub f11: KeyState,
    pub f12: KeyState,
    pub home: KeyState,
    pub end: KeyState,
    pub insert: KeyState,
    pub delete: KeyState,
    pub tilde: KeyState,
    pub key_1: KeyState,
    pub key_2: KeyState,
    pub key_3: KeyState,
    pub key_4: KeyState,
    pub key_5: KeyState,
    pub key_6: KeyState,
    pub key_7: KeyState,
    pub key_8: KeyState,
    pub key_9: KeyState,
    pub key_0: KeyState,
    pub minus: KeyState,
    pub plus: KeyState,
    pub backspace: KeyState,
    pub tab: KeyState,
    pub q: KeyState,
    pub w: KeyState,
    pub e: KeyState,
    pub r: KeyState,
    pub t: KeyState,
    pub y: KeyState,
    pub u: KeyState,
    pub i: KeyState,
    pub o: KeyState,
    pub p: KeyState,
    pub l_bracket: KeyState,
    pub r_bracket: KeyState,
    pub backslash: KeyState,
    pub capslock: KeyState,
    pub a: KeyState,
    pub s: KeyState,
    pub d: KeyState,
    pub f: KeyState,
    pub g: KeyState,
    pub h: KeyState,
    pub j: KeyState,
    pub k: KeyState,
    pub l: KeyState,
    pub semicolon: KeyState,
    pub quote: KeyState,
    pub enter: KeyState,
    pub l_shift: KeyState,
    pub z: KeyState,
    pub x: KeyState,
    pub c: KeyState,
    pub v: KeyState,
    pub b: KeyState,
    pub n: KeyState,
    pub m: KeyState,
    pub comma: KeyState,
    pub period: KeyState,
    pub slash: KeyState,
    pub r_shift: KeyState,
    pub l_ctrl: KeyState,
    pub l_alt: KeyState,
    pub space: KeyState,
    pub r_alt: KeyState,
    pub r_ctrl: KeyState,
    pub page_up: KeyState,
    pub page_down: KeyState,
    pub up: KeyState,
    pub down: KeyState,
    pub left: KeyState,
    pub right: KeyState,
}

impl Keys {
    pub(crate) fn by_code(&mut self, code: KeyCode) -> Option<&mut KeyState> {
        Some(match code {
            KeyCode::Escape => &mut self.escape,
            KeyCode::F1 => &mut self.f1,
            KeyCode::F2 => &mut self.f2,
            KeyCode::F3 => &mut self.f3,
            KeyCode::F4 => &mut self.f4,
            KeyCode::F5 => &mut self.f5,
            KeyCode::F6 => &mut self.f6,
            KeyCode::F7 => &mut self.f7,
            KeyCode::F8 => &mut self.f8,
            KeyCode::F9 => &mut self.f9,
            KeyCode::F10 => &mut self.f10,
            KeyCode::F11 => &mut self.f11,
            KeyCode::F12 => &mut self.f12,
            KeyCode::Home => &mut self.home,
            KeyCode::End => &mut self.end,
            KeyCode::Insert => &mut self.insert,
            KeyCode::Delete => &mut self.delete,
            KeyCode::Backquote => &mut self.tilde,
            KeyCode::Digit1 => &mut self.key_1,
            KeyCode::Digit2 => &mut self.key_2,
            KeyCode::Digit3 => &mut self.key_3,
            KeyCode::Digit4 => &mut self.key_4,
            KeyCode::Digit5 => &mut self.key_5,
            KeyCode::Digit6 => &mut self.key_6,
            KeyCode::Digit7 => &mut self.key_7,
            KeyCode::Digit8 => &mut self.key_8,
            KeyCode::Digit9 => &mut self.key_9,
            KeyCode::Digit0 => &mut self.key_0,
            KeyCode::Minus => &mut self.minus,
            KeyCode::Equal => &mut self.plus,
            KeyCode::Backspace => &mut self.backspace,
            KeyCode::Tab => &mut self.tab,
            KeyCode::KeyQ => &mut self.q,
            KeyCode::KeyW => &mut self.w,
            KeyCode::KeyE => &mut self.e,
            KeyCode::KeyR => &mut self.r,
            KeyCode::KeyT => &mut self.t,
            KeyCode::KeyY => &mut self.y,
            KeyCode::KeyU => &mut self.u,
            KeyCode::KeyI => &mut self.i,
            KeyCode::KeyO => &mut self.o,
            KeyCode::KeyP => &mut self.p,
            KeyCode::BracketLeft => &mut self.l_bracket,
            KeyCode::BracketRight => &mut self.r_bracket,
            KeyCode::Backslash => &mut self.backslash,
            KeyCode::CapsLock => &mut self.capslock,
            KeyCode::KeyA => &mut self.a,
            KeyCode::KeyS => &mut self.s,
            KeyCode::KeyD => &mut self.d,
            KeyCode::KeyF => &mut self.f,
            KeyCode::KeyG => &mut self.g,
            KeyCode::KeyH => &mut self.h,
            KeyCode::KeyJ => &mut self.j,
            KeyCode::KeyK => &mut self.k,
            KeyCode::KeyL => &mut self.l,
            KeyCode::Semicolon => &mut self.semicolon,
            KeyCode::Quote => &mut self.quote,
            KeyCode::Enter => &mut self.enter,
            KeyCode::ShiftLeft => &mut self.l_shift,
            KeyCode::KeyZ => &mut self.z,
            KeyCode::KeyX => &mut self.x,
            KeyCode::KeyC => &mut self.c,
            KeyCode::KeyV => &mut self.v,
            KeyCode::KeyB => &mut self.b,
            KeyCode::KeyN => &mut self.n,
            KeyCode::KeyM => &mut self.m,
            KeyCode::Comma => &mut self.comma,
            KeyCode::Period => &mut self.period,
            KeyCode::Slash => &mut self.slash,
            KeyCode::ShiftRight => &mut self.r_shift,
            KeyCode::ControlLeft => &mut self.l_ctrl,
            KeyCode::AltLeft => &mut self.l_alt,
            KeyCode::Space => &mut self.space,
            KeyCode::AltRight => &mut self.r_alt,
            KeyCode::ControlRight => &mut self.r_ctrl,
            KeyCode::PageUp => &mut self.page_up,
            KeyCode::PageDown => &mut self.page_down,
            KeyCode::ArrowUp => &mut self.up,
            KeyCode::ArrowDown => &mut self.down,
            KeyCode::ArrowLeft => &mut self.left,
            KeyCode::ArrowRight => &mut self.right,
            _ => return None,
        })
    }

    pub(crate) fn tick(&mut self) {
        // We need to call tick() on all fields
        *self = Self {
            escape: self.escape.tick(),
            f1: self.f1.tick(),
            f2: self.f2.tick(),
            f3: self.f3.tick(),
            f4: self.f4.tick(),
            f5: self.f5.tick(),
            f6: self.f6.tick(),
            f7: self.f7.tick(),
            f8: self.f8.tick(),
            f9: self.f9.tick(),
            f10: self.f10.tick(),
            f11: self.f11.tick(),
            f12: self.f12.tick(),
            home: self.home.tick(),
            end: self.end.tick(),
            insert: self.insert.tick(),
            delete: self.delete.tick(),
            tilde: self.tilde.tick(),
            key_1: self.key_1.tick(),
            key_2: self.key_2.tick(),
            key_3: self.key_3.tick(),
            key_4: self.key_4.tick(),
            key_5: self.key_5.tick(),
            key_6: self.key_6.tick(),
            key_7: self.key_7.tick(),
            key_8: self.key_8.tick(),
            key_9: self.key_9.tick(),
            key_0: self.key_0.tick(),
            minus: self.minus.tick(),
            plus: self.plus.tick(),
            backspace: self.backspace.tick(),
            tab: self.tab.tick(),
            q: self.q.tick(),
            w: self.w.tick(),
            e: self.e.tick(),
            r: self.r.tick(),
            t: self.t.tick(),
            y: self.y.tick(),
            u: self.u.tick(),
            i: self.i.tick(),
            o: self.o.tick(),
            p: self.p.tick(),
            l_bracket: self.l_bracket.tick(),
            r_bracket: self.r_bracket.tick(),
            backslash: self.backslash.tick(),
            capslock: self.capslock.tick(),
            a: self.a.tick(),
            s: self.s.tick(),
            d: self.d.tick(),
            f: self.g.tick(),
            g: self.g.tick(),
            h: self.h.tick(),
            j: self.j.tick(),
            k: self.k.tick(),
            l: self.l.tick(),
            semicolon: self.semicolon.tick(),
            quote: self.quote.tick(),
            enter: self.enter.tick(),
            l_shift: self.l_shift.tick(),
            z: self.z.tick(),
            x: self.x.tick(),
            c: self.c.tick(),
            v: self.v.tick(),
            b: self.b.tick(),
            n: self.n.tick(),
            m: self.m.tick(),
            comma: self.comma.tick(),
            period: self.period.tick(),
            slash: self.slash.tick(),
            r_shift: self.r_shift.tick(),
            l_ctrl: self.l_ctrl.tick(),
            l_alt: self.l_alt.tick(),
            space: self.space.tick(),
            r_alt: self.r_alt.tick(),
            r_ctrl: self.r_ctrl.tick(),
            page_up: self.page_up.tick(),
            page_down: self.page_down.tick(),
            up: self.up.tick(),
            down: self.down.tick(),
            left: self.left.tick(),
            right: self.right.tick(),
        };
    }
}
